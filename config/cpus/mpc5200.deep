#deep-1

meta {
	version = "2012-07-04";
	description = "CPU description file for Freescale MPC5200";
}

cpu mpc5200 {
	description = "Freescale MPC5200";
	cpuarch = ppc32;
	
	sysconst {
		
		SRAM_BaseAddr = 0xF0008000;						# Internal SRAM Base Address
		SRAM_Size = 0x4000;								# Internal SRAM Size (16K)
		
		MemBaseAddr = 0xf0000000;
		
		PSC1Base = MemBaseAddr + 0x2000; 
		PSC2Base = MemBaseAddr + 0x2200; 
		PSC3Base = MemBaseAddr + 0x2400; 
		PSC4Base = MemBaseAddr + 0x2600; 
		PSC5Base = MemBaseAddr + 0x2800; 
		PSC6Base = MemBaseAddr + 0x2c00; 
		
		MSCAN1Base = MemBaseAddr + 0x900; 
		MSCAN2Base = MemBaseAddr + 0x980; 

		excpCodeSize = 0x4000;							# Exception code size (includes exception vectors and further methods of the exception classes
		sysTabBaseAddr = excpCodeSize;					# Place system table behind exception code
		SRR1init = 0x3802;								# Initial value of Machine Status Save/Restore Register 1
	}
	
	memorymap {

		# ===== Internal RAM =====
		device InternalSRAM {
			attributes = read, write;
			width = 4; # byte
			size = SRAM_Size;
			base = SRAM_BaseAddr;
			technology = ram;
		}
				
		segment InternalSRAM.Unusable {
			attributes = read;
			base = SRAM_BaseAddr;
		}
	}
	
	registermap {

		# special purpose register
		 register SVR {
			 type = SPR;
			 addr = 286;
			 size = 4;
		}
		 register SPR286 {
			 type = SPR;
			 addr = 286;
			 size = 4;
		}
		 register PVR {
			 type = SPR;
			 addr = 287;
			 size = 4;
		}
		 register SPR287 {
			 type = SPR;
			 addr = 287;
			 size = 4;
		}
		 register SPR528 {
			 type = SPR;
			 addr = 528;
			 size = 4;
		}
		 register MI_GRA {
			 type = SPR;
			 addr = 528;
			 size = 4;
		}
		 register SPR536 {
			 type = SPR;
			 addr = 536;
			 size = 4;
		}
		 register L2U_GRA {
			 type = SPR;
			 addr = 536;
			 size = 4;
		}
		 register SPR560 {
			 type = SPR;
			 addr = 560;
			 size = 4;
		}
		 register BBCMCR {
			 type = SPR;
			 addr = 560;
			 size = 4;
		}
		 register SPR568 {
			 type = SPR;
			 addr = 568;
			 size = 4;
		}
		 register L2U_MCR {
			 type = SPR;
			 addr = 568;
			 size = 4;
		}
		 register SPR630 {
			 type = SPR;
			 addr = 630;
			 size = 4;
		}
		 register DPDR {
			 type = SPR;
			 addr = 630;
			 size = 4;
		}
		 register HID0 {
			 type = SPR;
			 addr = 1008;
			 size = 4;
		}
		 register SPR1008 {
			 type = SPR;
			 addr = 1008;
			 size = 4;
		}
		 register HID1 {
			 type = SPR;
			 addr = 1009;
			 size = 4;
		}
		 register SPR1009 {
			 type = SPR;
			 addr = 1009;
			 size = 4;
		}
		 register HID2 {
			 type = SPR;
			 addr = 1011;
			 size = 4;
		}
		 register SPR1011 {
			 type = SPR;
			 addr = 1011;
			 size = 4;
		}

		# peripheral control registers
		# memory map registers
		register MBAR {
			type = IOR;
			addr = MemBaseAddr + 0;
			size = 4;
		}
		register CS0START {
			type = IOR;
			addr = MemBaseAddr + 0x4;
			size = 4;
		}
		register CS0STOP {
			type = IOR;
			addr = MemBaseAddr + 0x8;
			size = 4;
		}
		register CS1START {
			type = IOR;
			addr = MemBaseAddr + 0xC;
			size = 4;
		}
		register CS1STOP {
			type = IOR;
			addr = MemBaseAddr + 0x10;
			size = 4;
		}
		register CS2START {
			type = IOR;
			addr = MemBaseAddr + 0x14;
			size = 4;
		}
		register CS2STOP {
			type = IOR;
			addr = MemBaseAddr + 0x18;
			size = 4;
		}
		register CS3START {
			type = IOR;
			addr = MemBaseAddr + 0x1C;
			size = 4;
		}
		register CS3STOP {
			type = IOR;
			addr = MemBaseAddr + 0x20;
			size = 4;
		}
		register CS4START {
			type = IOR;
			addr = MemBaseAddr + 0x24;
			size = 4;
		}
		register CS4STOP {
			type = IOR;
			addr = MemBaseAddr + 0x28;
			size = 4;
		}
		register CS5START {
			type = IOR;
			addr = MemBaseAddr + 0x2C;
			size = 4;
		}
		register CS5STOP {
			type = IOR;
			addr = MemBaseAddr + 0x30;
			size = 4;
		}
		register SDRAMCS0 {
			type = IOR;
			addr = MemBaseAddr + 0x34;
			size = 4;
		}
		register SDRAMCS1 {
			type = IOR;
			addr = MemBaseAddr + 0x38;
			size = 4;
		}
		register IPBICR {
			type = IOR;
			addr = MemBaseAddr + 0x54;
			size = 4;
		}
		
		# SDRAM controller registers
		register SDRAMMR {
			type = IOR;
			addr = MemBaseAddr + 0x100;
			size = 4;
		}
		register SDRAMCR {
			type = IOR;
			addr = MemBaseAddr + 0x104;
			size = 4;
		}
		register SDRAMCR1 {
			type = IOR;
			addr = MemBaseAddr + 0x108;
			size = 4;
		}
		register SDRAMCR2 {
			type = IOR;
			addr = MemBaseAddr + 0x10c;
			size = 4;
		}
		register SDRAMSCDR {
			type = IOR;
			addr = MemBaseAddr + 0x190;
			size = 4;
		}
		
		# clock distribution controller registers
		register CDMCER {
			type = IOR;
			addr = MemBaseAddr + 0x214;
			size = 4;
		}
		register CDMPSC1MCLKCR {
			type = IOR;
			addr = MemBaseAddr + 0x228;
			size = 4;
		}
		register CDMPSC2MCLKCR {
			type = IOR;
			addr = MemBaseAddr + 0x22c;
			size = 4;
		}
		register CDMPSC3MCLKCR {
			type = IOR;
			addr = MemBaseAddr + 0x230;
			size = 4;
		}
		register CDMPSC6MCLKCR {
			type = IOR;
			addr = MemBaseAddr + 0x234;
			size = 4;
		}
		
		# chip select controller registers
		register CS0CR {
			type = IOR;
			addr = MemBaseAddr + 0x300;
			size = 4;
		}
		register CS1CR {
			type = IOR;
			addr = MemBaseAddr + 0x304;
			size = 4;
		}
		register CS2CR {
			type = IOR;
			addr = MemBaseAddr + 0x308;
			size = 4;
		}
		register CS3CR {
			type = IOR;
			addr = MemBaseAddr + 0x30c;
			size = 4;
		}
		register CS4CR {
			type = IOR;
			addr = MemBaseAddr + 0x310;
			size = 4;
		}
		register CS5CR {
			type = IOR;
			addr = MemBaseAddr + 0x314;
			size = 4;
		}
		register CS6CR {
			type = IOR;
			addr = MemBaseAddr + 0x320;
			size = 4;
		}
		register CS7CR {
			type = IOR;
			addr = MemBaseAddr + 0x324;
			size = 4;
		}
		register CSCR {
			type = IOR;
			addr = MemBaseAddr + 0x318;
			size = 4;
		}
		register CSSR {
			type = IOR;
			addr = MemBaseAddr + 0x31c;
			size = 4;
		}
		register CSBCR {
			type = IOR;
			addr = MemBaseAddr + 0x328;
			size = 4;
		}
		
		# interrupt controller registers
		register ICTLPIMR {
			type = IOR;
			addr = MemBaseAddr + 0x0500;
			size = 4;
		}
		register ICTLPPR1 {
			type = IOR;
			addr = MemBaseAddr + 0x0504;
			size = 4;
		}
		register ICTLPPR2 {
			type = IOR;
			addr = MemBaseAddr + 0x0508;
			size = 4;
		}
		register ICTLPPR3 {
			type = IOR;
			addr = MemBaseAddr + 0x050c;
			size = 4;
		}
		register ICTLEER {
			type = IOR;
			addr = MemBaseAddr + 0x0510;
			size = 4;
		}
		register ICTCPMIMR {
			type = IOR;
			addr = MemBaseAddr + 0x0514;
			size = 4;
		}
		register ICTLMIPR1 {
			type = IOR;
			addr = MemBaseAddr + 0x0518;
			size = 4;
		}
		register ICTLMIPR2 {
			type = IOR;
			addr = MemBaseAddr + 0x051C;
			size = 4;
		}
		register ICTLSER {
			type = IOR;
			addr = MemBaseAddr + 0x0524;
			size = 4;
		}
		register ICTLCISAR {
			type = IOR;
			addr = MemBaseAddr + 0x0528;
			size = 4;
		}
		register ICTLMISAR {
			type = IOR;
			addr = MemBaseAddr + 0x052C;
			size = 4;
		}
		register ICTLPISAR {
			type = IOR;
			addr = MemBaseAddr + 0x0530;
			size = 4;
		}
		register ICTLBESR {
			type = IOR;
			addr = MemBaseAddr + 0x0538;
			size = 4;
		}
		register ICTLMIEAR {
			type = IOR;
			addr = MemBaseAddr + 0x0540;
			size = 4;
		}
		register ICTLPIEAR {
			type = IOR;
			addr = MemBaseAddr + 0x0544;
			size = 4;
		}
		register ICTLIRQIELR {
			type = IOR;
			addr = MemBaseAddr + 0x0548;
			size = 4;
		}
		
		# GPIO registers
		register GPSPCR {
			type = IOR;
			addr = MemBaseAddr + 0x0b00;
			size = 4;
		}
		register GPWER {
			type = IOR;
			addr = MemBaseAddr + 0x0c00;
			size = 4;
		}
		register GPWDDR {
			type = IOR;
			addr = MemBaseAddr + 0x0c08;
			size = 4;
		}
		register GPWOUT {
			type = IOR;
			addr = MemBaseAddr + 0x0c0C;
			size = 4;
		}
		register GPWIN {
			type = IOR;
			addr = MemBaseAddr + 0x0c20;
			size = 4;
		}
		
		# XLB Registers
		register XLBACR {
			type = IOR;
			addr = MemBaseAddr + 0x1f40;
			size = 4;
		}
		
		# PSC Registers, offset has to be added to the base address of the corresponding PSC
		register PSCMR1 {
			type = IOR;
			addr = 0;
			size = 1;
		}
		register PSCMR2 {
			type = IOR;
			addr = 0;
			size = 1;
		}
		register PSCSR {
			type = IOR;
			addr = 0x4;
			size = 2;
		}
		register PSCCSR {
			type = IOR;
			addr = 0x4;
			size = 2;
		}
		register PSCCR {
			type = IOR;
			addr = 0x8;
			size = 1;
		}
		register PSCRxBuf {
			type = IOR;
			addr = 0xc;
			size = 4;
		}
		register PSCTxBuf {
			type = IOR;
			addr = 0xc;
			size = 4;
		}
		register PSCCTUR {
			type = IOR;
			addr = 0x18;
			size = 1;
		}
		register PSCCTLR {
			type = IOR;
			addr = 0x1c;
			size = 1;
		}
		register PSCCCR {
			type = IOR;
			addr = 0x20;
			size = 4;
		}
		register PSCSICR {
			type = IOR;
			addr = 0x40;
			size = 4;
		}
		register PSCRFNUM {
			type = IOR;
			addr = 0x58;
			size = 2;
		}
		register PSCTFNUM {
			type = IOR;
			addr = 0x5c;
			size = 2;
		}
		register PSCRFCNTL {
			type = IOR;
			addr = 0x68;
			size = 1;
		}
		register PSCTFSTAT {
			type = IOR;
			addr = 0x84;
			size = 2;
		}
		register PSCTFCNTL {
			type = IOR;
			addr = 0x88;
			size = 1;
		}
		
		# MSCAN Registers, offset has to be added to the base address of the corresponding PSC		
		register CANCTL0 {
			type = IOR;
			addr = 0x0;
			size = 1;
		}
		register CANCTL1 {
			type = IOR;
			addr = 0x1;
			size = 1;
		}
		register CANBTR0 {
			type = IOR;
			addr = 0x4;
			size = 1;
		}
		register CANBTR1 {
			type = IOR;
			addr = 0x5;
			size = 1;
		}
		register CANRFLG {
			type = IOR;
			addr = 0x8;
			size = 1;
		}
		register CANRIER {
			type = IOR;
			addr = 0x9;
			size = 1;
		}
		register CANTFLG {
			type = IOR;
			addr = 0xc;
			size = 1;
		}
		register CANTIER {
			type = IOR;
			addr = 0xd;
			size = 1;
		}
		register CANTARQ {
			type = IOR;
			addr = 0x10;
			size = 1;
		}
		register CANTAAK {
			type = IOR;
			addr = 0x11;
			size = 1;
		}
		register CANTBSEL {
			type = IOR;
			addr = 0x14;
			size = 1;
		}
		register CANIDAC {
			type = IOR;
			addr = 0x15;
			size = 1;
		}
		register CANRXERR {
			type = IOR;
			addr = 0x1c;
			size = 1;
		}
		register CANTXERR {
			type = IOR;
			addr = 0x1d;
			size = 1;
		}
		register CANIDAR0 {
			type = IOR;
			addr = 0x20;
			size = 1;
		}
		register CANIDAR1 {
			type = IOR;
			addr = 0x21;
			size = 1;
		}
		register CANIDAR2 {
			type = IOR;
			addr = 0x24;
			size = 1;
		}
		register CANIDAR3 {
			type = IOR;
			addr = 0x25;
			size = 1;
		}
		register CANIDMR0 {
			type = IOR;
			addr = 0x28;
			size = 1;
		}
		register CANIDMR1 {
			type = IOR;
			addr = 0x29;
			size = 1;
		}
		register CANIDMR2 {
			type = IOR;
			addr = 0x2c;
			size = 1;
		}
		register CANIDMR3 {
			type = IOR;
			addr = 0x2d;
			size = 1;
		}
		register CANIDAR4 {
			type = IOR;
			addr = 0x30;
			size = 1;
		}
		register CANIDAR5 {
			type = IOR;
			addr = 0x31;
			size = 1;
		}
		register CANIDAR6 {
			type = IOR;
			addr = 0x34;
			size = 1;
		}
		register CANIDAR7 {
			type = IOR;
			addr = 0x35;
			size = 1;
		}
		register CANIDMR4 {
			type = IOR;
			addr = 0x38;
			size = 1;
		}
		register CANIDMR5 {
			type = IOR;
			addr = 0x39;
			size = 1;
		}
		register CANIDMR6 {
			type = IOR;
			addr = 0x3c;
			size = 1;
		}
		register CANIDMR7 {
			type = IOR;
			addr = 0x3d;
			size = 1;
		}
		register CANRXFG {
			type = IOR;
			addr = 0x40;
			size = 1;
		}
		register CANTXFG {
			type = IOR;
			addr = 0x60;
			size = 1;
		}
		register CANTXIR0 {
			type = IOR;
			addr = 0x60;
			size = 1;
		}
		register CANTXIR1 {
			type = IOR;
			addr = 0x61;
			size = 1;
		}
		register CANTXIR2 {
			type = IOR;
			addr = 0x64;
			size = 1;
		}
		register CANTXIR3 {
			type = IOR;
			addr = 0x65;
			size = 1;
		}
		register CANTXDSR0 {
			type = IOR;
			addr = 0x68;
			size = 1;
		}
		register CANTXDSR1 {
			type = IOR;
			addr = 0x69;
			size = 1;
		}
		register CANTXDSR2 {
			type = IOR;
			addr = 0x6c;
			size = 1;
		}
		register CANTXDSR3 {
			type = IOR;
			addr = 0x6d;
			size = 1;
		}
		register CANTXDSR4 {
			type = IOR;
			addr = 0x70;
			size = 1;
		}
		register CANTXDSR5 {
			type = IOR;
			addr = 0x71;
			size = 1;
		}
		register CANTXDSR6 {
			type = IOR;
			addr = 0x74;
			size = 1;
		}
		register CANTXDSR7 {
			type = IOR;
			addr = 0x75;
			size = 1;
		}
		register CANTXDLR {
			type = IOR;
			addr = 0x78;
			size = 1;
		}
		register CANTXTBPR {
			type = IOR;
			addr = 0x79;
			size = 1;
		}
	}
}